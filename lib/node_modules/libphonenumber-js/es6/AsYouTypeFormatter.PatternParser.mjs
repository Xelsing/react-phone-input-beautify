"use client";
function f(e, o) {
  if (!(e instanceof o))
    throw new TypeError("Cannot call a class as a function");
}
function c(e, o) {
  for (var t = 0; t < o.length; t++) {
    var r = o[t];
    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
  }
}
function l(e, o, t) {
  return o && c(e.prototype, o), t && c(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
var w = /* @__PURE__ */ function() {
  function e() {
    f(this, e);
  }
  return l(e, [{
    key: "parse",
    value: function(t) {
      if (this.context = [{
        or: !0,
        instructions: []
      }], this.parsePattern(t), this.context.length !== 1)
        throw new Error("Non-finalized contexts left when pattern parse ended");
      var r = this.context[0], i = r.branches, n = r.instructions;
      if (i)
        return {
          op: "|",
          args: i.concat([s(n)])
        };
      if (n.length === 0)
        throw new Error("Pattern is required");
      return n.length === 1 ? n[0] : n;
    }
  }, {
    key: "startContext",
    value: function(t) {
      this.context.push(t);
    }
  }, {
    key: "endContext",
    value: function() {
      this.context.pop();
    }
  }, {
    key: "getContext",
    value: function() {
      return this.context[this.context.length - 1];
    }
  }, {
    key: "parsePattern",
    value: function(t) {
      if (!t)
        throw new Error("Pattern is required");
      var r = t.match(C);
      if (!r) {
        if (g.test(t))
          throw new Error("Illegal characters found in a pattern: ".concat(t));
        this.getContext().instructions = this.getContext().instructions.concat(t.split(""));
        return;
      }
      var i = r[1], n = t.slice(0, r.index), a = t.slice(r.index + i.length);
      switch (i) {
        case "(?:":
          n && this.parsePattern(n), this.startContext({
            or: !0,
            instructions: [],
            branches: []
          });
          break;
        case ")":
          if (!this.getContext().or)
            throw new Error('")" operator must be preceded by "(?:" operator');
          if (n && this.parsePattern(n), this.getContext().instructions.length === 0)
            throw new Error('No instructions found after "|" operator in an "or" group');
          var u = this.getContext(), h = u.branches;
          h.push(s(this.getContext().instructions)), this.endContext(), this.getContext().instructions.push({
            op: "|",
            args: h
          });
          break;
        case "|":
          if (!this.getContext().or)
            throw new Error('"|" operator can only be used inside "or" groups');
          if (n && this.parsePattern(n), !this.getContext().branches)
            if (this.context.length === 1)
              this.getContext().branches = [];
            else
              throw new Error('"branches" not found in an "or" group context');
          this.getContext().branches.push(s(this.getContext().instructions)), this.getContext().instructions = [];
          break;
        case "[":
          n && this.parsePattern(n), this.startContext({
            oneOfSet: !0
          });
          break;
        case "]":
          if (!this.getContext().oneOfSet)
            throw new Error('"]" operator must be preceded by "[" operator');
          this.endContext(), this.getContext().instructions.push({
            op: "[]",
            args: x(n)
          });
          break;
        default:
          throw new Error("Unknown operator: ".concat(i));
      }
      a && this.parsePattern(a);
    }
  }]), e;
}();
function x(e) {
  for (var o = [], t = 0; t < e.length; ) {
    if (e[t] === "-") {
      if (t === 0 || t === e.length - 1)
        throw new Error("Couldn't parse a one-of set pattern: ".concat(e));
      for (var r = e[t - 1].charCodeAt(0) + 1, i = e[t + 1].charCodeAt(0) - 1, n = r; n <= i; )
        o.push(String.fromCharCode(n)), n++;
    } else
      o.push(e[t]);
    t++;
  }
  return o;
}
var g = /[\(\)\[\]\?\:\|]/, C = new RegExp(
  // any of:
  "(\\||\\(\\?\\:|\\)|\\[|\\])"
);
function s(e) {
  return e.length === 1 ? e[0] : e;
}
export {
  w as default
};
