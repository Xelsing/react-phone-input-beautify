"use client";
import { parseDigit as i } from "./helpers/parseDigits.mjs";
function o(r, t) {
  var e = typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
  if (e)
    return (e = e.call(r)).next.bind(e);
  if (Array.isArray(r) || (e = f(r)) || t && r && typeof r.length == "number") {
    e && (r = e);
    var n = 0;
    return function() {
      return n >= r.length ? { done: !0 } : { done: !1, value: r[n++] };
    };
  }
  throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function f(r, t) {
  if (r) {
    if (typeof r == "string")
      return a(r, t);
    var e = Object.prototype.toString.call(r).slice(8, -1);
    if (e === "Object" && r.constructor && (e = r.constructor.name), e === "Map" || e === "Set")
      return Array.from(r);
    if (e === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))
      return a(r, t);
  }
}
function a(r, t) {
  (t == null || t > r.length) && (t = r.length);
  for (var e = 0, n = new Array(t); e < t; e++)
    n[e] = r[e];
  return n;
}
function p(r) {
  for (var t = "", e = o(r.split("")), n; !(n = e()).done; ) {
    var u = n.value;
    t += l(u, t) || "";
  }
  return t;
}
function l(r, t, e) {
  if (r === "+") {
    if (t) {
      typeof e == "function" && e("end");
      return;
    }
    return "+";
  }
  return i(r);
}
export {
  p as default,
  l as parsePhoneNumberCharacter
};
