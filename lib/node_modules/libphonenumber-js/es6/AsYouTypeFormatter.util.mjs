"use client";
function c(r, t) {
  var e = typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
  if (e)
    return (e = e.call(r)).next.bind(e);
  if (Array.isArray(r) || (e = p(r)) || t && r && typeof r.length == "number") {
    e && (r = e);
    var n = 0;
    return function() {
      return n >= r.length ? { done: !0 } : { done: !1, value: r[n++] };
    };
  }
  throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function p(r, t) {
  if (r) {
    if (typeof r == "string")
      return o(r, t);
    var e = Object.prototype.toString.call(r).slice(8, -1);
    if (e === "Object" && r.constructor && (e = r.constructor.name), e === "Map" || e === "Set")
      return Array.from(r);
    if (e === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))
      return o(r, t);
  }
}
function o(r, t) {
  (t == null || t > r.length) && (t = r.length);
  for (var e = 0, n = new Array(t); e < t; e++)
    n[e] = r[e];
  return n;
}
var v = "x", i = new RegExp(v);
function y(r, t) {
  if (t < 1)
    return "";
  for (var e = ""; t > 1; )
    t & 1 && (e += r), t >>= 1, r += r;
  return e + r;
}
function s(r, t) {
  return r[t] === ")" && t++, h(r.slice(0, t));
}
function h(r) {
  for (var t = [], e = 0; e < r.length; )
    r[e] === "(" ? t.push(e) : r[e] === ")" && t.pop(), e++;
  var n = 0, a = "";
  t.push(r.length);
  for (var u = 0, f = t; u < f.length; u++) {
    var l = f[u];
    a += r.slice(n, l), n = l + 1;
  }
  return a;
}
function b(r, t, e) {
  for (var n = c(e.split("")), a; !(a = n()).done; ) {
    var u = a.value;
    if (r.slice(t + 1).search(i) < 0)
      return;
    t = r.search(i), r = r.replace(i, u);
  }
  return [r, t];
}
export {
  v as DIGIT_PLACEHOLDER,
  s as cutAndStripNonPairedParens,
  b as populateTemplateWithDigits,
  y as repeat,
  h as stripNonPairedParens
};
