"use client";
import h from "./metadata.mjs";
import C from "./PhoneNumber.mjs";
import c from "./AsYouTypeState.mjs";
import y from "./AsYouTypeFormatter.mjs";
import b from "./AsYouTypeParser.mjs";
import v from "./helpers/getCountryByCallingCode.mjs";
import N from "./helpers/getCountryByNationalNumber.mjs";
import p from "./helpers/isObject.mjs";
import { DIGIT_PLACEHOLDER as _ } from "./AsYouTypeFormatter.util.mjs";
function k(a, e) {
  return S(a) || A(a, e) || P(a, e) || T();
}
function T() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function P(a, e) {
  if (a) {
    if (typeof a == "string")
      return g(a, e);
    var t = Object.prototype.toString.call(a).slice(8, -1);
    if (t === "Object" && a.constructor && (t = a.constructor.name), t === "Map" || t === "Set")
      return Array.from(a);
    if (t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))
      return g(a, e);
  }
}
function g(a, e) {
  (e == null || e > a.length) && (e = a.length);
  for (var t = 0, n = new Array(e); t < e; t++)
    n[t] = a[t];
  return n;
}
function A(a, e) {
  var t = a == null ? null : typeof Symbol < "u" && a[Symbol.iterator] || a["@@iterator"];
  if (t != null) {
    var n = [], i = !0, u = !1, r, o;
    try {
      for (t = t.call(a); !(i = (r = t.next()).done) && (n.push(r.value), !(e && n.length === e)); i = !0)
        ;
    } catch (l) {
      u = !0, o = l;
    } finally {
      try {
        !i && t.return != null && t.return();
      } finally {
        if (u)
          throw o;
      }
    }
    return n;
  }
}
function S(a) {
  if (Array.isArray(a))
    return a;
}
function I(a, e) {
  if (!(a instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
function m(a, e) {
  for (var t = 0; t < e.length; t++) {
    var n = e[t];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(a, n.key, n);
  }
}
function F(a, e, t) {
  return e && m(a.prototype, e), t && m(a, t), Object.defineProperty(a, "prototype", { writable: !1 }), a;
}
var V = /* @__PURE__ */ function() {
  function a(e, t) {
    I(this, a), this.metadata = new h(t);
    var n = this.getCountryAndCallingCode(e), i = k(n, 2), u = i[0], r = i[1];
    this.defaultCountry = u, this.defaultCallingCode = r, this.reset();
  }
  return F(a, [{
    key: "getCountryAndCallingCode",
    value: function(t) {
      var n, i;
      return t && (p(t) ? (n = t.defaultCountry, i = t.defaultCallingCode) : n = t), n && !this.metadata.hasCountry(n) && (n = void 0), [n, i];
    }
    /**
     * Inputs "next" phone number characters.
     * @param  {string} text
     * @return {string} Formatted phone number characters that have been input so far.
     */
  }, {
    key: "input",
    value: function(t) {
      var n = this.parser.input(t, this.state), i = n.digits, u = n.justLeadingPlus;
      if (u)
        this.formattedOutput = "+";
      else if (i) {
        this.determineTheCountryIfNeeded(), this.state.nationalSignificantNumber && this.formatter.narrowDownMatchingFormats(this.state);
        var r;
        if (this.metadata.hasSelectedNumberingPlan() && (r = this.formatter.format(i, this.state)), r === void 0 && this.parser.reExtractNationalSignificantNumber(this.state)) {
          this.determineTheCountryIfNeeded();
          var o = this.state.getNationalDigits();
          o && (r = this.formatter.format(o, this.state));
        }
        this.formattedOutput = r ? this.getFullNumber(r) : this.getNonFormattedNumber();
      }
      return this.formattedOutput;
    }
  }, {
    key: "reset",
    value: function() {
      var t = this;
      return this.state = new c({
        onCountryChange: function(i) {
          t.country = i;
        },
        onCallingCodeChange: function(i, u) {
          t.metadata.selectNumberingPlan(u, i), t.formatter.reset(t.metadata.numberingPlan, t.state), t.parser.reset(t.metadata.numberingPlan);
        }
      }), this.formatter = new y({
        state: this.state,
        metadata: this.metadata
      }), this.parser = new b({
        defaultCountry: this.defaultCountry,
        defaultCallingCode: this.defaultCallingCode,
        metadata: this.metadata,
        state: this.state,
        onNationalSignificantNumberChange: function() {
          t.determineTheCountryIfNeeded(), t.formatter.reset(t.metadata.numberingPlan, t.state);
        }
      }), this.state.reset({
        country: this.defaultCountry,
        callingCode: this.defaultCallingCode
      }), this.formattedOutput = "", this;
    }
    /**
     * Returns `true` if the phone number is being input in international format.
     * In other words, returns `true` if and only if the parsed phone number starts with a `"+"`.
     * @return {boolean}
     */
  }, {
    key: "isInternational",
    value: function() {
      return this.state.international;
    }
    /**
     * Returns the "calling code" part of the phone number when it's being input
     * in an international format.
     * If no valid calling code has been entered so far, returns `undefined`.
     * @return {string} [callingCode]
     */
  }, {
    key: "getCallingCode",
    value: function() {
      if (this.isInternational())
        return this.state.callingCode;
    }
    // A legacy alias.
  }, {
    key: "getCountryCallingCode",
    value: function() {
      return this.getCallingCode();
    }
    /**
     * Returns a two-letter country code of the phone number.
     * Returns `undefined` for "non-geographic" phone numbering plans.
     * Returns `undefined` if no phone number has been input yet.
     * @return {string} [country]
     */
  }, {
    key: "getCountry",
    value: function() {
      var t = this.state.digits;
      if (t)
        return this._getCountry();
    }
    /**
     * Returns a two-letter country code of the phone number.
     * Returns `undefined` for "non-geographic" phone numbering plans.
     * @return {string} [country]
     */
  }, {
    key: "_getCountry",
    value: function() {
      var t = this.state.country;
      return t;
    }
  }, {
    key: "determineTheCountryIfNeeded",
    value: function() {
      (!this.state.country || this.isCountryCallingCodeAmbiguous()) && this.determineTheCountry();
    }
    // Prepends `+CountryCode ` in case of an international phone number
  }, {
    key: "getFullNumber",
    value: function(t) {
      var n = this;
      if (this.isInternational()) {
        var i = function(o) {
          return n.formatter.getInternationalPrefixBeforeCountryCallingCode(n.state, {
            spacing: !!o
          }) + o;
        }, u = this.state.callingCode;
        return i(u ? t ? "".concat(u, " ").concat(t) : u : "".concat(this.state.getDigitsWithoutInternationalPrefix()));
      }
      return t;
    }
  }, {
    key: "getNonFormattedNationalNumberWithPrefix",
    value: function() {
      var t = this.state, n = t.nationalSignificantNumber, i = t.complexPrefixBeforeNationalSignificantNumber, u = t.nationalPrefix, r = n, o = i || u;
      return o && (r = o + r), r;
    }
  }, {
    key: "getNonFormattedNumber",
    value: function() {
      var t = this.state.nationalSignificantNumberMatchesInput;
      return this.getFullNumber(t ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());
    }
  }, {
    key: "getNonFormattedTemplate",
    value: function() {
      var t = this.getNonFormattedNumber();
      if (t)
        return t.replace(/[\+\d]/g, _);
    }
  }, {
    key: "isCountryCallingCodeAmbiguous",
    value: function() {
      var t = this.state.callingCode, n = this.metadata.getCountryCodesForCallingCode(t);
      return n && n.length > 1;
    }
    // Determines the country of the phone number
    // entered so far based on the country phone code
    // and the national phone number.
  }, {
    key: "determineTheCountry",
    value: function() {
      this.state.setCountry(v(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, {
        nationalNumber: this.state.nationalSignificantNumber,
        defaultCountry: this.defaultCountry,
        metadata: this.metadata
      }));
    }
    /**
     * Returns a E.164 phone number value for the user's input.
     *
     * For example, for country `"US"` and input `"(222) 333-4444"`
     * it will return `"+12223334444"`.
     *
     * For international phone number input, it will also auto-correct
     * some minor errors such as using a national prefix when writing
     * an international phone number. For example, if the user inputs
     * `"+44 0 7400 000000"` then it will return an auto-corrected
     * `"+447400000000"` phone number value.
     *
     * Will return `undefined` if no digits have been input,
     * or when inputting a phone number in national format and no
     * default country or default "country calling code" have been set.
     *
     * @return {string} [value]
     */
  }, {
    key: "getNumberValue",
    value: function() {
      var t = this.state, n = t.digits, i = t.callingCode, u = t.country, r = t.nationalSignificantNumber;
      if (n) {
        if (this.isInternational())
          return i ? "+" + i + r : "+" + n;
        if (u || i) {
          var o = u ? this.metadata.countryCallingCode() : i;
          return "+" + o + r;
        }
      }
    }
    /**
     * Returns an instance of `PhoneNumber` class.
     * Will return `undefined` if no national (significant) number
     * digits have been entered so far, or if no `defaultCountry` has been
     * set and the user enters a phone number not in international format.
     */
  }, {
    key: "getNumber",
    value: function() {
      var t = this.state, n = t.nationalSignificantNumber, i = t.carrierCode, u = t.callingCode, r = this._getCountry();
      if (n && !(!r && !u)) {
        if (r && r === this.defaultCountry) {
          var o = new h(this.metadata.metadata);
          o.selectNumberingPlan(r);
          var l = o.numberingPlan.callingCode(), s = this.metadata.getCountryCodesForCallingCode(l);
          if (s.length > 1) {
            var f = N(n, {
              countries: s,
              defaultCountry: this.defaultCountry,
              metadata: this.metadata.metadata
            });
            f && (r = f);
          }
        }
        var d = new C(r || u, n, this.metadata.metadata);
        return i && (d.carrierCode = i), d;
      }
    }
    /**
     * Returns `true` if the phone number is "possible".
     * Is just a shortcut for `PhoneNumber.isPossible()`.
     * @return {boolean}
     */
  }, {
    key: "isPossible",
    value: function() {
      var t = this.getNumber();
      return t ? t.isPossible() : !1;
    }
    /**
     * Returns `true` if the phone number is "valid".
     * Is just a shortcut for `PhoneNumber.isValid()`.
     * @return {boolean}
     */
  }, {
    key: "isValid",
    value: function() {
      var t = this.getNumber();
      return t ? t.isValid() : !1;
    }
    /**
     * @deprecated
     * This method is used in `react-phone-number-input/source/input-control.js`
     * in versions before `3.0.16`.
     */
  }, {
    key: "getNationalNumber",
    value: function() {
      return this.state.nationalSignificantNumber;
    }
    /**
     * Returns the phone number characters entered by the user.
     * @return {string}
     */
  }, {
    key: "getChars",
    value: function() {
      return (this.state.international ? "+" : "") + this.state.digits;
    }
    /**
     * Returns the template for the formatted phone number.
     * @return {string}
     */
  }, {
    key: "getTemplate",
    value: function() {
      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || "";
    }
  }]), a;
}();
export {
  V as default
};
