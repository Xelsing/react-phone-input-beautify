"use client";
function u(e, n) {
  if (!(e instanceof n))
    throw new TypeError("Cannot call a class as a function");
}
function o(e, n) {
  for (var i = 0; i < n.length; i++) {
    var t = n[i];
    t.enumerable = t.enumerable || !1, t.configurable = !0, "value" in t && (t.writable = !0), Object.defineProperty(e, t.key, t);
  }
}
function s(e, n, i) {
  return n && o(e.prototype, n), i && o(e, i), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
var r = /* @__PURE__ */ function() {
  function e(n) {
    var i = n.onCountryChange, t = n.onCallingCodeChange;
    u(this, e), this.onCountryChange = i, this.onCallingCodeChange = t;
  }
  return s(e, [{
    key: "reset",
    value: function(i) {
      var t = i.country, a = i.callingCode;
      this.international = !1, this.missingPlus = !1, this.IDDPrefix = void 0, this.callingCode = void 0, this.digits = "", this.resetNationalSignificantNumber(), this.initCountryAndCallingCode(t, a);
    }
  }, {
    key: "resetNationalSignificantNumber",
    value: function() {
      this.nationalSignificantNumber = this.getNationalDigits(), this.nationalSignificantNumberMatchesInput = !0, this.nationalPrefix = void 0, this.carrierCode = void 0, this.complexPrefixBeforeNationalSignificantNumber = void 0;
    }
  }, {
    key: "update",
    value: function(i) {
      for (var t = 0, a = Object.keys(i); t < a.length; t++) {
        var l = a[t];
        this[l] = i[l];
      }
    }
  }, {
    key: "initCountryAndCallingCode",
    value: function(i, t) {
      this.setCountry(i), this.setCallingCode(t);
    }
  }, {
    key: "setCountry",
    value: function(i) {
      this.country = i, this.onCountryChange(i);
    }
  }, {
    key: "setCallingCode",
    value: function(i) {
      this.callingCode = i, this.onCallingCodeChange(i, this.country);
    }
  }, {
    key: "startInternationalNumber",
    value: function(i, t) {
      this.international = !0, this.initCountryAndCallingCode(i, t);
    }
  }, {
    key: "appendDigits",
    value: function(i) {
      this.digits += i;
    }
  }, {
    key: "appendNationalSignificantNumberDigits",
    value: function(i) {
      this.nationalSignificantNumber += i;
    }
    /**
     * Returns the part of `this.digits` that corresponds to the national number.
     * Basically, all digits that have been input by the user, except for the
     * international prefix and the country calling code part
     * (if the number is an international one).
     * @return {string}
     */
  }, {
    key: "getNationalDigits",
    value: function() {
      return this.international ? this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0)) : this.digits;
    }
  }, {
    key: "getDigitsWithoutInternationalPrefix",
    value: function() {
      return this.international && this.IDDPrefix ? this.digits.slice(this.IDDPrefix.length) : this.digits;
    }
  }]), e;
}();
export {
  r as default
};
