"use client";
import { DIGIT_PLACEHOLDER as f, cutAndStripNonPairedParens as P, repeat as N, populateTemplateWithDigits as R } from "./AsYouTypeFormatter.util.mjs";
import S, { canFormatCompleteNumber as E } from "./AsYouTypeFormatter.complete.mjs";
import D from "./AsYouTypeFormatter.PatternMatcher.mjs";
import T from "./helpers/parseDigits.mjs";
import { FIRST_GROUP_PATTERN as _ } from "./helpers/formatNationalNumberUsingFormat.mjs";
import { VALID_PUNCTUATION as p } from "./constants.mjs";
import C from "./helpers/applyInternationalSeparatorStyle.mjs";
function x(r, a) {
  var t = typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
  if (t)
    return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = k(r)) || a && r && typeof r.length == "number") {
    t && (r = t);
    var e = 0;
    return function() {
      return e >= r.length ? { done: !0 } : { done: !1, value: r[e++] };
    };
  }
  throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function k(r, a) {
  if (r) {
    if (typeof r == "string")
      return y(r, a);
    var t = Object.prototype.toString.call(r).slice(8, -1);
    if (t === "Object" && r.constructor && (t = r.constructor.name), t === "Map" || t === "Set")
      return Array.from(r);
    if (t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))
      return y(r, a);
  }
}
function y(r, a) {
  (a == null || a > r.length) && (a = r.length);
  for (var t = 0, e = new Array(a); t < a; t++)
    e[t] = r[t];
  return e;
}
function w(r, a) {
  if (!(r instanceof a))
    throw new TypeError("Cannot call a class as a function");
}
function b(r, a) {
  for (var t = 0; t < a.length; t++) {
    var e = a[t];
    e.enumerable = e.enumerable || !1, e.configurable = !0, "value" in e && (e.writable = !0), Object.defineProperty(r, e.key, e);
  }
}
function O(r, a, t) {
  return a && b(r.prototype, a), t && b(r, t), Object.defineProperty(r, "prototype", { writable: !1 }), r;
}
var g = "9", M = 15, L = N(g, M), G = /[- ]/, B = function() {
  return /\[([^\[\]])*\]/g;
}, U = function() {
  return /\d(?=[^,}][^,}])/g;
}, H = new RegExp("[" + p + "]*\\$1[" + p + "]*(\\$\\d[" + p + "]*)*$"), A = 3, z = /* @__PURE__ */ function() {
  function r(a) {
    a.state;
    var t = a.metadata;
    w(this, r), this.metadata = t, this.resetFormat();
  }
  return O(r, [{
    key: "resetFormat",
    value: function() {
      this.chosenFormat = void 0, this.template = void 0, this.nationalNumberTemplate = void 0, this.populatedNationalNumberTemplate = void 0, this.populatedNationalNumberTemplatePosition = -1;
    }
  }, {
    key: "reset",
    value: function(t, e) {
      this.resetFormat(), t ? (this.isNANP = t.callingCode() === "1", this.matchingFormats = t.formats(), e.nationalSignificantNumber && this.narrowDownMatchingFormats(e)) : (this.isNANP = void 0, this.matchingFormats = []);
    }
    /**
     * Formats an updated phone number.
     * @param  {string} nextDigits — Additional phone number digits.
     * @param  {object} state — `AsYouType` state.
     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.
     */
  }, {
    key: "format",
    value: function(t, e) {
      var i = this;
      if (E(e.nationalSignificantNumber, this.metadata))
        for (var n = x(this.matchingFormats), o; !(o = n()).done; ) {
          var m = o.value, l = S(e, m, {
            metadata: this.metadata,
            shouldTryNationalPrefixFormattingRule: function(s) {
              return i.shouldTryNationalPrefixFormattingRule(s, {
                international: e.international,
                nationalPrefix: e.nationalPrefix
              });
            },
            getSeparatorAfterNationalPrefix: function(s) {
              return i.getSeparatorAfterNationalPrefix(s);
            }
          });
          if (l)
            return this.resetFormat(), this.chosenFormat = m, this.setNationalNumberTemplate(l.replace(/\d/g, f), e), this.populatedNationalNumberTemplate = l, this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(f), l;
        }
      return this.formatNationalNumberWithNextDigits(t, e);
    }
    // Formats the next phone number digits.
  }, {
    key: "formatNationalNumberWithNextDigits",
    value: function(t, e) {
      var i = this.chosenFormat, n = this.chooseFormat(e);
      if (n)
        return n === i ? this.formatNextNationalNumberDigits(t) : this.formatNextNationalNumberDigits(e.getNationalDigits());
    }
  }, {
    key: "narrowDownMatchingFormats",
    value: function(t) {
      var e = this, i = t.nationalSignificantNumber, n = t.nationalPrefix, o = t.international, m = i, l = m.length - A;
      l < 0 && (l = 0), this.matchingFormats = this.matchingFormats.filter(function(u) {
        return e.formatSuits(u, o, n) && e.formatMatches(u, m, l);
      }), this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1 && this.resetFormat();
    }
  }, {
    key: "formatSuits",
    value: function(t, e, i) {
      return !(i && !t.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&
      !t.nationalPrefixIsOptionalWhenFormattingInNationalFormat() || !e && !i && t.nationalPrefixIsMandatoryWhenFormattingInNationalFormat());
    }
  }, {
    key: "formatMatches",
    value: function(t, e, i) {
      var n = t.leadingDigitsPatterns().length;
      if (n === 0)
        return !0;
      i = Math.min(i, n - 1);
      var o = t.leadingDigitsPatterns()[i];
      if (e.length < A)
        try {
          return new D(o).match(e, {
            allowOverflow: !0
          }) !== void 0;
        } catch (m) {
          return console.error(m), !0;
        }
      return new RegExp("^(".concat(o, ")")).test(e);
    }
  }, {
    key: "getFormatFormat",
    value: function(t, e) {
      return e ? t.internationalFormat() : t.format();
    }
  }, {
    key: "chooseFormat",
    value: function(t) {
      for (var e = this, i = function() {
        var u = o.value;
        return e.chosenFormat === u ? "break" : H.test(e.getFormatFormat(u, t.international)) ? e.createTemplateForFormat(u, t) ? (e.chosenFormat = u, "break") : (e.matchingFormats = e.matchingFormats.filter(function(s) {
          return s !== u;
        }), "continue") : "continue";
      }, n = x(this.matchingFormats.slice()), o; !(o = n()).done; ) {
        var m = i();
        if (m === "break")
          break;
      }
      return this.chosenFormat || this.resetFormat(), this.chosenFormat;
    }
  }, {
    key: "createTemplateForFormat",
    value: function(t, e) {
      if (!(t.pattern().indexOf("|") >= 0)) {
        var i = this.getTemplateForFormat(t, e);
        if (i)
          return this.setNationalNumberTemplate(i, e), !0;
      }
    }
  }, {
    key: "getSeparatorAfterNationalPrefix",
    value: function(t) {
      return this.isNANP || t && t.nationalPrefixFormattingRule() && G.test(t.nationalPrefixFormattingRule()) ? " " : "";
    }
  }, {
    key: "getInternationalPrefixBeforeCountryCallingCode",
    value: function(t, e) {
      var i = t.IDDPrefix, n = t.missingPlus;
      return i ? e && e.spacing === !1 ? i : i + " " : n ? "" : "+";
    }
  }, {
    key: "getTemplate",
    value: function(t) {
      if (this.template) {
        for (var e = -1, i = 0, n = t.international ? this.getInternationalPrefixBeforeCountryCallingCode(t, {
          spacing: !1
        }) : ""; i < n.length + t.getDigitsWithoutInternationalPrefix().length; )
          e = this.template.indexOf(f, e + 1), i++;
        return P(this.template, e + 1);
      }
    }
  }, {
    key: "setNationalNumberTemplate",
    value: function(t, e) {
      this.nationalNumberTemplate = t, this.populatedNationalNumberTemplate = t, this.populatedNationalNumberTemplatePosition = -1, e.international ? this.template = this.getInternationalPrefixBeforeCountryCallingCode(e).replace(/[\d\+]/g, f) + N(f, e.callingCode.length) + " " + t : this.template = t;
    }
    /**
     * Generates formatting template for a national phone number,
     * optionally containing a national prefix, for a format.
     * @param  {Format} format
     * @param  {string} nationalPrefix
     * @return {string}
     */
  }, {
    key: "getTemplateForFormat",
    value: function(t, e) {
      var i = e.nationalSignificantNumber, n = e.international, o = e.nationalPrefix, m = e.complexPrefixBeforeNationalSignificantNumber, l = t.pattern();
      l = l.replace(B(), "\\d").replace(U(), "\\d");
      var u = L.match(l)[0];
      if (!(i.length > u.length)) {
        var s = new RegExp("^" + l + "$"), F = i.replace(/\d/g, g);
        s.test(F) && (u = F);
        var c = this.getFormatFormat(t, n), v;
        if (this.shouldTryNationalPrefixFormattingRule(t, {
          international: n,
          nationalPrefix: o
        })) {
          var I = c.replace(_, t.nationalPrefixFormattingRule());
          if (T(t.nationalPrefixFormattingRule()) === (o || "") + T("$1") && (c = I, v = !0, o))
            for (var d = o.length; d > 0; )
              c = c.replace(/\d/, f), d--;
        }
        var h = u.replace(new RegExp(l), c).replace(new RegExp(g, "g"), f);
        return v || (m ? h = N(f, m.length) + " " + h : o && (h = N(f, o.length) + this.getSeparatorAfterNationalPrefix(t) + h)), n && (h = C(h)), h;
      }
    }
  }, {
    key: "formatNextNationalNumberDigits",
    value: function(t) {
      var e = R(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, t);
      if (!e) {
        this.resetFormat();
        return;
      }
      return this.populatedNationalNumberTemplate = e[0], this.populatedNationalNumberTemplatePosition = e[1], P(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1);
    }
  }, {
    key: "shouldTryNationalPrefixFormattingRule",
    value: function(t, e) {
      var i = e.international, n = e.nationalPrefix;
      if (t.nationalPrefixFormattingRule()) {
        var o = t.usesNationalPrefix();
        if (o && n || !o && !i)
          return !0;
      }
    }
  }]), r;
}();
export {
  f as DIGIT_PLACEHOLDER,
  z as default
};
