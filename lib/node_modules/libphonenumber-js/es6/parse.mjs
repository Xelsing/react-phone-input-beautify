"use client";
import { MIN_LENGTH_FOR_NSN as h, MAX_LENGTH_FOR_NSN as d, PLUS_CHARS as T, VALID_DIGITS as g } from "./constants.mjs";
import m from "./ParseError.mjs";
import O, { getCountryCallingCode as P } from "./metadata.mjs";
import s, { isViablePhoneNumberStart as v } from "./helpers/isViablePhoneNumber.mjs";
import w from "./helpers/extension/extractExtension.mjs";
import y from "./parseIncompletePhoneNumber.mjs";
import { isPossibleNumber as S } from "./isPossible.mjs";
import x from "./PhoneNumber.mjs";
import R from "./helpers/matchesEntirely.mjs";
import E from "./helpers/extractCountryCallingCode.mjs";
import I from "./helpers/extractNationalNumber.mjs";
import A from "./helpers/getCountryByCallingCode.mjs";
import p from "./helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.mjs";
var H = 250, L = new RegExp("[" + T + g + "]"), U = new RegExp("[^" + g + "#]+$");
function Z(t, r, n) {
  if (r = r || {}, n = new O(n), r.defaultCountry && !n.hasCountry(r.defaultCountry))
    throw r.v2 ? new m("INVALID_COUNTRY") : new Error("Unknown country: ".concat(r.defaultCountry));
  var e = G(t, r.v2, r.extract), l = e.number, c = e.ext, u = e.error;
  if (!l) {
    if (r.v2)
      throw u === "TOO_SHORT" ? new m("TOO_SHORT") : new m("NOT_A_NUMBER");
    return {};
  }
  var a = D(l, r.defaultCountry, r.defaultCallingCode, n), i = a.country, o = a.nationalNumber, N = a.countryCallingCode, _ = a.countryCallingCodeSource, f = a.carrierCode;
  if (!n.hasSelectedNumberingPlan()) {
    if (r.v2)
      throw new m("INVALID_COUNTRY");
    return {};
  }
  if (!o || o.length < h) {
    if (r.v2)
      throw new m("TOO_SHORT");
    return {};
  }
  if (o.length > d) {
    if (r.v2)
      throw new m("TOO_LONG");
    return {};
  }
  if (r.v2) {
    var C = new x(N, o, n.metadata);
    return i && (C.country = i), f && (C.carrierCode = f), c && (C.ext = c), C.__countryCallingCodeSource = _, C;
  }
  var b = (r.extended ? n.hasSelectedNumberingPlan() : i) ? R(o, n.nationalNumberPattern()) : !1;
  return r.extended ? {
    country: i,
    countryCallingCode: N,
    carrierCode: f,
    valid: b,
    possible: b ? !0 : !!(r.extended === !0 && n.possibleLengths() && S(o, n)),
    phone: o,
    ext: c
  } : b ? M(i, o, c) : {};
}
function F(t, r, n) {
  if (t) {
    if (t.length > H) {
      if (n)
        throw new m("TOO_LONG");
      return;
    }
    if (r === !1)
      return t;
    var e = t.search(L);
    if (!(e < 0))
      return t.slice(e).replace(U, "");
  }
}
function G(t, r, n) {
  var e = p(t, {
    extractFormattedPhoneNumber: function(u) {
      return F(u, n, r);
    }
  });
  if (!e)
    return {};
  if (!s(e))
    return v(e) ? {
      error: "TOO_SHORT"
    } : {};
  var l = w(e);
  return l.ext ? l : {
    number: e
  };
}
function M(t, r, n) {
  var e = {
    country: t,
    phone: r
  };
  return n && (e.ext = n), e;
}
function D(t, r, n, e) {
  var l = E(y(t), r, n, e.metadata), c = l.countryCallingCodeSource, u = l.countryCallingCode, a = l.number, i;
  if (u)
    e.selectNumberingPlan(u);
  else if (a && (r || n))
    e.selectNumberingPlan(r, n), r && (i = r), u = n || P(r, e.metadata);
  else
    return {};
  if (!a)
    return {
      countryCallingCodeSource: c,
      countryCallingCode: u
    };
  var o = I(y(a), e), N = o.nationalNumber, _ = o.carrierCode, f = A(u, {
    nationalNumber: N,
    defaultCountry: r,
    metadata: e
  });
  return f && (i = f, f === "001" || e.country(i)), {
    country: i,
    countryCallingCode: u,
    countryCallingCodeSource: c,
    nationalNumber: N,
    carrierCode: _
  };
}
export {
  Z as default
};
