"use client";
import f from "./helpers/checkNumberLength.mjs";
import m from "./helpers/parseDigits.mjs";
import u from "./helpers/formatNationalNumberUsingFormat.mjs";
function d(a, t, r) {
  var e = r.metadata, n = r.shouldTryNationalPrefixFormattingRule, o = r.getSeparatorAfterNationalPrefix, i = new RegExp("^(?:".concat(t.pattern(), ")$"));
  if (i.test(a.nationalSignificantNumber))
    return N(a, t, {
      metadata: e,
      shouldTryNationalPrefixFormattingRule: n,
      getSeparatorAfterNationalPrefix: o
    });
}
function p(a, t) {
  return f(a, t) === "IS_POSSIBLE";
}
function N(a, t, r) {
  var e = r.metadata, n = r.shouldTryNationalPrefixFormattingRule, o = r.getSeparatorAfterNationalPrefix;
  if (a.nationalSignificantNumber, a.international, a.nationalPrefix, a.carrierCode, n(t)) {
    var i = l(a, t, {
      useNationalPrefixFormattingRule: !0,
      getSeparatorAfterNationalPrefix: o,
      metadata: e
    });
    if (i)
      return i;
  }
  return l(a, t, {
    useNationalPrefixFormattingRule: !1,
    getSeparatorAfterNationalPrefix: o,
    metadata: e
  });
}
function l(a, t, r) {
  var e = r.metadata, n = r.useNationalPrefixFormattingRule, o = r.getSeparatorAfterNationalPrefix, i = u(a.nationalSignificantNumber, t, {
    carrierCode: a.carrierCode,
    useInternationalFormat: a.international,
    withNationalPrefix: n,
    metadata: e
  });
  if (n || (a.nationalPrefix ? i = a.nationalPrefix + o(t) + i : a.complexPrefixBeforeNationalSignificantNumber && (i = a.complexPrefixBeforeNationalSignificantNumber + " " + i)), g(i, a))
    return i;
}
function g(a, t) {
  return m(a) === t.getNationalDigits();
}
export {
  p as canFormatCompleteNumber,
  d as default
};
